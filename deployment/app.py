#!/usr/bin/env python3
"""
üåΩ AgriDiagnostic IA - Serveur Flask pour le d√©ploiement
Application web pour la classification des maladies du ma√Øs
"""

import os
import sys
import json
import traceback
from datetime import datetime
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('deployment/logs/app.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Imports Flask
from flask import Flask, render_template, request, jsonify, send_from_directory
from werkzeug.utils import secure_filename
from werkzeug.exceptions import RequestEntityTooLarge

# Imports pour l'IA
import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
import numpy as np

# Configuration de l'application
app = Flask(__name__)
app.config['SECRET_KEY'] = 'corn_disease_classification_2025'
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024  # 10MB max file size
app.config['UPLOAD_FOLDER'] = 'deployment/uploads'
app.config['STATIC_FOLDER'] = 'deployment/static'
app.config['TEMPLATES_FOLDER'] = 'deployment/templates'

# Configuration du mod√®le
MODEL_CONFIG = {
    'model_path': 'vgg16_optimized_model.pth',
    'classes': ['gls', 'nlb', 'nls'],
    'class_names': {
        'gls': 'Gray Leaf Spot',
        'nlb': 'Northern Leaf Blight', 
        'nls': 'Northern Leaf Spot'
    },
    'input_size': (224, 224),
    'device': 'cuda' if torch.cuda.is_available() else 'cpu'
}

# Informations d√©taill√©es sur les maladies
DISEASE_INFO = {
    'gls': {
        'name': 'Gray Leaf Spot',
        'scientific': 'Cercospora zeae-maydis',
        'icon': 'üî¥',
        'severity': '√âlev√©e',
        'impact': '15-60% de r√©duction du rendement',
        'symptoms': 'L√©sions rectangulaires grises avec bordures sombres',
        'description': '''La tache grise des feuilles est une maladie fongique majeure du ma√Øs caus√©e par 
        Cercospora zeae-maydis. Elle se caract√©rise par des l√©sions rectangulaires grises avec des 
        bordures sombres, suivant g√©n√©ralement les nervures des feuilles. Cette maladie peut causer 
        des r√©ductions de rendement significatives de 15% √† 60% dans les conditions favorables.''',
        'recommendations': [
            'Application de fongicides sp√©cifiques √† base de triazoles ou strobilurines',
            'Rotation avec des cultures non-h√¥tes pour briser le cycle pathog√®ne', 
            'Enfouissement profond des r√©sidus de culture infect√©s',
            'Monitoring r√©gulier des conditions m√©t√©orologiques favorables'
        ]
    },
    'nlb': {
        'name': 'Northern Leaf Blight',
        'scientific': 'Exserohilum turcicum',
        'icon': 'üîµ',
        'severity': '√âlev√©e',
        'impact': 'Jusqu\'√† 50% de perte de rendement',
        'symptoms': 'L√©sions elliptiques de couleur brun-gris',
        'description': '''La br√ªlure du nord des feuilles est caus√©e par Exserohilum turcicum. Cette maladie 
        se manifeste par des l√©sions elliptiques de couleur brun-gris qui peuvent s'√©tendre sur plusieurs 
        centim√®tres. Elle est particuli√®rement probl√©matique dans les r√©gions √† climat frais et humide, 
        pouvant causer jusqu'√† 50% de perte de rendement.''',
        'recommendations': [
            'Application pr√©ventive de fongicides syst√©miques d√®s les premiers sympt√¥mes',
            'Utilisation de vari√©t√©s avec g√®nes de r√©sistance Ht1, Ht2, ou Ht3',
            'Am√©lioration de la circulation d\'air entre les plants',
            '√âviter l\'exc√®s d\'azote qui favorise le d√©veloppement de la maladie'
        ]
    },
    'nls': {
        'name': 'Northern Leaf Spot',
        'scientific': 'Bipolaris zeicola',
        'icon': 'üü¢',
        'severity': 'Mod√©r√©e',
        'impact': '10-25% de perte de rendement',
        'symptoms': 'Petites taches circulaires √† ovales',
        'description': '''La tache du nord des feuilles est caus√©e par Bipolaris zeicola. Cette maladie se 
        caract√©rise par de petites taches circulaires √† ovales, souvent avec un centre plus clair. 
        Bien que moins agressive que les autres maladies, elle peut n√©anmoins causer des pertes de 
        rendement mod√©r√©es de 10% √† 25%.''',
        'recommendations': [
            'Fongicides √† base de cuivre ou triazoles selon la pression de la maladie',
            '√âviter l\'irrigation par aspersion qui favorise la dispersion des spores',
            'Fertilisation √©quilibr√©e pour renforcer la r√©sistance naturelle',
            '√âlimination des feuilles infect√©es et des d√©bris v√©g√©taux'
        ]
    }
}

# Variables globales pour le mod√®le
model = None
transform = None
device = torch.device(MODEL_CONFIG['device'])

# ===============================================
# Initialisation de l'application
# ===============================================

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    directories = [
        'deployment/uploads',
        'deployment/logs',
        'deployment/static/css',
        'deployment/static/js',
        'deployment/templates'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ R√©pertoire cr√©√©/v√©rifi√©: {directory}")

def load_model():
    """Charge le mod√®le pr√©-entra√Æn√©"""
    global model, transform
    
    try:
        logger.info("ü§ñ Chargement du mod√®le...")
        
        # V√©rifier si le mod√®le existe
        if not os.path.exists(MODEL_CONFIG['model_path']):
            logger.error(f"‚ùå Mod√®le non trouv√©: {MODEL_CONFIG['model_path']}")
            return False
        
        # Charger le mod√®le
        model = torch.load(MODEL_CONFIG['model_path'], map_location=device)
        model.eval()
        model.to(device)
        
        # D√©finir les transformations
        transform = transforms.Compose([
            transforms.Resize(MODEL_CONFIG['input_size']),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                               std=[0.229, 0.224, 0.225])
        ])
        
        logger.info(f"‚úÖ Mod√®le charg√© avec succ√®s sur {device}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        logger.error(traceback.format_exc())
        return False

def init_app():
    """Initialise l'application"""
    logger.info("üåΩ Initialisation d'AgriDiagnostic IA...")
    
    # Cr√©er les r√©pertoires
    create_directories()
    
    # Charger le mod√®le
    if not load_model():
        logger.warning("‚ö†Ô∏è Application d√©marr√©e sans mod√®le (mode d√©mo)")
    
    logger.info("‚úÖ Application initialis√©e avec succ√®s")

# ===============================================
# Routes principales
# ===============================================

@app.route('/')
def index():
    """Page d'accueil"""
    return render_template('index.html')

@app.route('/health')
def health_check():
    """V√©rification de l'√©tat de l'application"""
    status = {
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'model_loaded': model is not None,
        'device': str(device),
        'version': '1.0.0'
    }
    return jsonify(status)

# ===============================================
# API d'analyse
# ===============================================

@app.route('/api/analyze', methods=['POST'])
def analyze_image():
    """Analyse une image pour d√©tecter les maladies"""
    try:
        # V√©rifier qu'un fichier a √©t√© envoy√©
        if 'image' not in request.files:
            return jsonify({
                'success': False,
                'error': 'Aucun fichier fourni'
            }), 400
        
        file = request.files['image']
        
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': 'Aucun fichier s√©lectionn√©'
            }), 400
        
        # Valider le fichier
        if not allowed_file(file.filename):
            return jsonify({
                'success': False,
                'error': 'Type de fichier non support√©'
            }), 400
        
        # Sauvegarder temporairement le fichier
        filename = secure_filename(file.filename)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        
        logger.info(f"üìÅ Fichier sauvegard√©: {filepath}")
        
        # Analyser l'image
        if model is not None:
            result = predict_disease(filepath)
        else:
            # Mode d√©mo si le mod√®le n'est pas charg√©
            result = simulate_prediction()
        
        # Supprimer le fichier temporaire
        try:
            os.remove(filepath)
        except:
            pass
        
        logger.info(f"‚úÖ Analyse termin√©e: {result['prediction']} ({result['confidence']:.2f}%)")
        
        return jsonify({
            'success': True,
            'result': result,
            'timestamp': datetime.now().isoformat()
        })
        
    except RequestEntityTooLarge:
        return jsonify({
            'success': False,
            'error': 'Fichier trop volumineux (max 10MB)'
        }), 413
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'analyse: {e}")
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': 'Erreur interne du serveur'
        }), 500

def allowed_file(filename):
    """V√©rifie si le type de fichier est autoris√©"""
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def predict_disease(image_path):
    """Pr√©dit la maladie √† partir d'une image"""
    try:
        # Charger et pr√©processer l'image
        image = Image.open(image_path).convert('RGB')
        input_tensor = transform(image).unsqueeze(0).to(device)
        
        # Pr√©diction
        with torch.no_grad():
            outputs = model(input_tensor)
            probabilities = torch.nn.functional.softmax(outputs[0], dim=0)
            predicted_class_idx = torch.argmax(probabilities).item()
            confidence = probabilities[predicted_class_idx].item() * 100
        
        # Classe pr√©dite
        predicted_class = MODEL_CONFIG['classes'][predicted_class_idx]
        
        # Alternatives (autres classes avec leurs probabilit√©s)
        alternatives = []
        for i, class_name in enumerate(MODEL_CONFIG['classes']):
            if i != predicted_class_idx:
                alternatives.append({
                    'disease': class_name,
                    'confidence': probabilities[i].item() * 100
                })
        
        alternatives.sort(key=lambda x: x['confidence'], reverse=True)
        
        # Construire le r√©sultat complet
        result = {
            'prediction': predicted_class,
            'confidence': confidence,
            'alternatives': alternatives,
            'disease_info': DISEASE_INFO[predicted_class]
        }
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la pr√©diction: {e}")
        return simulate_prediction()  # Fallback vers simulation

def simulate_prediction():
    """Simule une pr√©diction pour les tests/d√©mo"""
    import random
    
    # S√©lection al√©atoire d'une maladie
    predicted_class = random.choice(MODEL_CONFIG['classes'])
    confidence = random.uniform(85, 99)
    
    # G√©n√©rer des alternatives
    alternatives = []
    remaining_classes = [c for c in MODEL_CONFIG['classes'] if c != predicted_class]
    remaining_prob = 100 - confidence
    
    for i, class_name in enumerate(remaining_classes):
        alt_confidence = random.uniform(0, remaining_prob / len(remaining_classes))
        alternatives.append({
            'disease': class_name,
            'confidence': alt_confidence
        })
    
    alternatives.sort(key=lambda x: x['confidence'], reverse=True)
    
    result = {
        'prediction': predicted_class,
        'confidence': confidence,
        'alternatives': alternatives,
        'disease_info': DISEASE_INFO[predicted_class],
        'demo_mode': True
    }
    
    return result

# ===============================================
# Routes statiques
# ===============================================

@app.route('/static/<path:filename>')
def static_files(filename):
    """Sert les fichiers statiques"""
    return send_from_directory(app.config['STATIC_FOLDER'], filename)

# ===============================================
# Gestion des erreurs
# ===============================================

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Ressource non trouv√©e'
    }), 404

@app.errorhandler(413)
def too_large(error):
    return jsonify({
        'success': False,
        'error': 'Fichier trop volumineux (max 10MB)'
    }), 413

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"‚ùå Erreur interne: {error}")
    return jsonify({
        'success': False,
        'error': 'Erreur interne du serveur'
    }), 500

# ===============================================
# Point d'entr√©e
# ===============================================

if __name__ == '__main__':
    # Initialiser l'application
    init_app()
    
    # Configuration du serveur
    debug_mode = os.getenv('FLASK_ENV') == 'development'
    port = int(os.getenv('PORT', 5000))
    host = os.getenv('HOST', '127.0.0.1')
    
    logger.info(f"üöÄ D√©marrage du serveur sur {host}:{port}")
    logger.info(f"üîß Mode debug: {debug_mode}")
    logger.info(f"ü§ñ Mod√®le charg√©: {model is not None}")
    
    # D√©marrer le serveur
    app.run(
        host=host,
        port=port,
        debug=debug_mode,
        threaded=True
    )
